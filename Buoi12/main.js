// 1. Vi·∫øt h√†m t·∫°o Weapon v·ªõi c√°c thu·ªôc t√≠nh name, damage, ...
function Weapon(name, damage) {
    this.name = name;
    this.damage = damage;
}

// 2. Vi·∫øt h√†m t·∫°o Player v·ªõi c√°c thu·ªôc t√≠nh name, level, weapon, weapon object kh·ªüi t·∫°o t·ª´
// Weapon. Player c√≥ c√°c methods:
// - attack() t√≠nh v√† in ra m√†n h√¨nh l∆∞·ª£ng s√°t th∆∞∆°ng g√¢y ra = weapon.damage * level - changeWeapon() thay ƒë·ªïi weapon c·ªßa Player
function Player(name, level, weapon) {
    this.name = name;
    this.level = level;
    this.weapon = weapon;
    this.attack = function () {
        console.log(this.name+" Attack, Damage = " + this.weapon.damage * this.level)
    };
    this.changeWeapon = function (weaponChange) {
        this.weapon = weaponChange;
    }
}

// 3. T·∫°o m·ªôt v√†i ƒë·ªëi t∆∞·ª£ng t·ª´ Player v√† Weapon, g·ªçi ph∆∞∆°ng th·ª©c attack() tr√™n c√°c ƒë·ªëi t∆∞·ª£ng ƒë√≥
let infinityGauntlet = new Weapon("Infinity Gauntlet", 9999),
    ironManSuit = new Weapon("Iron Man Suit", 100),
    captainShield = new Weapon("Captain's Shield", 50);

let thanos = new Player("Thanos", 999, infinityGauntlet),
    tonyStark = new Player("Tony Stark", 50, ironManSuit),
    steveRogers = new Player("Steve Rogers", 30, captainShield);

console.log(thanos.attack());
console.log(tonyStark.attack());
console.log(steveRogers.attack());
tonyStark.changeWeapon(infinityGauntlet);
console.log(tonyStark.weapon);

// 4. T·∫°o m·ªôt object calculator, c√≥ c√°c thu·ªôc t√≠nh a, b l√† 2 s·ªë, v√† c√°c ph∆∞∆°ng th·ª©c:
// a. get(a, b) tham s·ªë nh·∫≠n v√†o l√† 2 s·ªë a, b
// b. add() tr·∫£ v·ªÅ t·ªïng a + b
// c. sub() tr·∫£ v·ªÅ hi·ªáu a - b
// d. div(), mul(), rem(), exp(), ... tr·∫£ v·ªÅ k·∫øt qu·∫£ ph√©p t√≠nh t∆∞∆°ng ·ª©ng
// e. L√†m th·∫ø n√†o ƒë·ªÉ cho ph√©p g·ªçi h√†m theo chu·ªói VD cal.get(4,5).add(); // 9
let calculator = {
    a: 0,
    b: 0,
    get(a, b) {
        this.a = a;
        this.b = b;
        return this
    },
    add() {
        console.log(this.a + this.b);
        return this;
    },
    sub() {
        console.log(this.a - this.b);
        return this;
    },
    div() {
        console.log(this.a / this.b);
        return this;
    },
    mul() {
        console.log(this.a * this.b);
        return this;
    },
    rem() {
        console.log(this.a % this.b);
        return this;
    },
    exp() {
        console.log(this.a ** this.b);
        return this;
    }
}
calculator.get(4, 5).add();

// 1. Vi·∫øt h√†m t·∫°o Counter, c√≥ thu·ªôc t√≠nh count, v√† c√°c ph∆∞∆°ng th·ª©c
// - count l√† tham s·ªë truy·ªÅn v√†o, m·∫∑c ƒë·ªãnh = 0
// - up() tƒÉng count l√™n 1
// - down() gi·∫£m count 1
// - get() in ra count hi·ªán t·∫°i
// - L√†m th·∫ø n√†o ƒë·ªÉ cho ph√©p g·ªçi h√†m theo chu·ªói VD counter.up().up().get().down().get();
function Counter(count = 0) {
    this.count = count;
    this.up = function () {
        console.log("Count = " + this.count++);
        return this
    }
    this.down = function () {
        console.log("Count = " + this.count--);
        return this
    };
    this.get = function () {
        console.log("Count = " + this.count);
        return this
    }
}
let counter = new Counter();
counter.up().up().get().down().get();

// 2. Vi·∫øt h√†m t·∫°o Girl c√≥ c√°c thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c t√πy √Ω üòÖ
function Girl(name, age, skill) {
    this.name = name;
    this.age = age;
    this.skill = skill;
    this.talk = function () {
        return console.log("Hello, my name is " + this.name)
    }
}
let maria = new Girl("Maria", 18, "Excellence");
console.log(maria);
maria.talk();

// 3. Vi·∫øt h√†m t·∫°o Boy c√≥ c√°c thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c t√πy √Ω üòâ (Boys, you know what I mean?)
function Boy(name, age, appearance) {
    this.name = name;
    this.age = age;
    this.appearance = appearance;
    this.flirt = function () {
        return console.log("abcxxx")
    };
}
let tuan = new Boy("Tuan", 24, "handsome");
console.log(tuan);
tuan.flirt();